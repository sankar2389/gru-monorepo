"""sell or buy bids"""
type Bid {
  _id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  bidPrice: Float!
  userId: String
  bidQuantity: Float
  totalPrice: Float
  status: String
}

type BidAggregator {
  count: Int
  sum: BidAggregatorSum
  avg: BidAggregatorAvg
  min: BidAggregatorMin
  max: BidAggregatorMax
}

type BidAggregatorAvg {
  bidQuantity: Float
  totalPrice: Float
}

type BidAggregatorMax {
  bidQuantity: Float
  totalPrice: Float
}

type BidAggregatorMin {
  bidQuantity: Float
  totalPrice: Float
}

type BidAggregatorSum {
  bidQuantity: Float
  totalPrice: Float
}

type BidConnection {
  values: [Bid]
  groupBy: BidGroupBy
  aggregate: BidAggregator
}

type BidConnection_id {
  key: ID
  connection: BidConnection
}

type BidConnectionBidPrice {
  key: Float
  connection: BidConnection
}

type BidConnectionBidQuantity {
  key: Float
  connection: BidConnection
}

type BidConnectionCreatedAt {
  key: DateTime
  connection: BidConnection
}

type BidConnectionStatus {
  key: String
  connection: BidConnection
}

type BidConnectionTotalPrice {
  key: Float
  connection: BidConnection
}

type BidConnectionUpdatedAt {
  key: DateTime
  connection: BidConnection
}

type BidConnectionUserId {
  key: String
  connection: BidConnection
}

type BidGroupBy {
  _id: [BidConnection_id]
  createdAt: [BidConnectionCreatedAt]
  updatedAt: [BidConnectionUpdatedAt]
  bidPrice: [BidConnectionBidPrice]
  userId: [BidConnectionUserId]
  bidQuantity: [BidConnectionBidQuantity]
  totalPrice: [BidConnectionTotalPrice]
  status: [BidConnectionStatus]
}

input BidInput {
  bidPrice: Float!
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
  bidQuantity: Float
  totalPrice: Float
  status: String
}

"""Buy requests"""
type Buy {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  creator: String
  unit: String
  quantity: Float
  price: Float
  creatorObject: JSON
  type: String
  bids: JSON
  acceptedBids: JSON
}

type BuyAggregator {
  count: Int
  sum: BuyAggregatorSum
  avg: BuyAggregatorAvg
  min: BuyAggregatorMin
  max: BuyAggregatorMax
}

type BuyAggregatorAvg {
  quantity: Float
  price: Float
}

type BuyAggregatorMax {
  quantity: Float
  price: Float
}

type BuyAggregatorMin {
  quantity: Float
  price: Float
}

type BuyAggregatorSum {
  quantity: Float
  price: Float
}

type BuyConnection {
  values: [Buy]
  groupBy: BuyGroupBy
  aggregate: BuyAggregator
}

type BuyConnection_id {
  key: ID
  connection: BuyConnection
}

type BuyConnectionAcceptedBids {
  key: JSON
  connection: BuyConnection
}

type BuyConnectionBids {
  key: JSON
  connection: BuyConnection
}

type BuyConnectionCreatedAt {
  key: DateTime
  connection: BuyConnection
}

type BuyConnectionCreator {
  key: String
  connection: BuyConnection
}

type BuyConnectionCreatorObject {
  key: JSON
  connection: BuyConnection
}

type BuyConnectionPrice {
  key: Float
  connection: BuyConnection
}

type BuyConnectionQuantity {
  key: Float
  connection: BuyConnection
}

type BuyConnectionType {
  key: String
  connection: BuyConnection
}

type BuyConnectionUnit {
  key: String
  connection: BuyConnection
}

type BuyConnectionUpdatedAt {
  key: DateTime
  connection: BuyConnection
}

type BuyGroupBy {
  _id: [BuyConnection_id]
  createdAt: [BuyConnectionCreatedAt]
  updatedAt: [BuyConnectionUpdatedAt]
  creator: [BuyConnectionCreator]
  unit: [BuyConnectionUnit]
  quantity: [BuyConnectionQuantity]
  price: [BuyConnectionPrice]
  creatorObject: [BuyConnectionCreatorObject]
  type: [BuyConnectionType]
  bids: [BuyConnectionBids]
  acceptedBids: [BuyConnectionAcceptedBids]
}

input BuyInput {
  creator: String
  unit: String
  quantity: Float
  price: Float
  creatorObject: JSON
  type: String
  bids: JSON
  acceptedBids: JSON
}

input createBidInput {
  data: BidInput
}

type createBidPayload {
  bid: Bid
}

input createBuyInput {
  data: BuyInput
}

type createBuyPayload {
  buy: Buy
}

input createGroupInput {
  data: GroupInput
}

type createGroupPayload {
  group: Group
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSellInput {
  data: SellInput
}

type createSellPayload {
  sell: Sell
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteBidInput {
  where: InputID
}

type deleteBidPayload {
  bid: Bid
}

input deleteBuyInput {
  where: InputID
}

type deleteBuyPayload {
  buy: Buy
}

input deleteGroupInput {
  where: InputID
}

type deleteGroupPayload {
  group: Group
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteSellInput {
  where: InputID
}

type deleteSellPayload {
  sell: Sell
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editBidInput {
  bidPrice: Float
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
  bidQuantity: Float
  totalPrice: Float
  status: String
}

input editBuyInput {
  creator: String
  unit: String
  quantity: Float
  price: Float
  creatorObject: JSON
  type: String
  bids: JSON
  acceptedBids: JSON
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editGroupInput {
  groupName: String
  creator: String
  members: JSON
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editSellInput {
  creator: String
  unit: String
  quantity: Float
  price: Float
  creatorObject: JSON
  type: String
  bids: JSON
  acceptedBids: JSON
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  socketId: String
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

type Group {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  groupName: String
  creator: String!
  members: JSON
}

type GroupAggregator {
  count: Int
}

type GroupConnection {
  values: [Group]
  groupBy: GroupGroupBy
  aggregate: GroupAggregator
}

type GroupConnection_id {
  key: ID
  connection: GroupConnection
}

type GroupConnectionCreatedAt {
  key: DateTime
  connection: GroupConnection
}

type GroupConnectionCreator {
  key: String
  connection: GroupConnection
}

type GroupConnectionGroupName {
  key: String
  connection: GroupConnection
}

type GroupConnectionMembers {
  key: JSON
  connection: GroupConnection
}

type GroupConnectionUpdatedAt {
  key: DateTime
  connection: GroupConnection
}

type GroupGroupBy {
  _id: [GroupConnection_id]
  createdAt: [GroupConnectionCreatedAt]
  updatedAt: [GroupConnectionUpdatedAt]
  groupName: [GroupConnectionGroupName]
  creator: [GroupConnectionCreator]
  members: [GroupConnectionMembers]
}

input GroupInput {
  groupName: String
  creator: String!
  members: JSON
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Bid | createBidPayload | updateBidPayload | deleteBidPayload | BidConnection | BidAggregator | BidAggregatorSum | BidAggregatorAvg | BidAggregatorMin | BidAggregatorMax | BidGroupBy | BidConnection_id | BidConnectionCreatedAt | BidConnectionUpdatedAt | BidConnectionBidPrice | BidConnectionUserId | BidConnectionBidQuantity | BidConnectionTotalPrice | BidConnectionStatus | Buy | createBuyPayload | updateBuyPayload | deleteBuyPayload | BuyConnection | BuyAggregator | BuyAggregatorSum | BuyAggregatorAvg | BuyAggregatorMin | BuyAggregatorMax | BuyGroupBy | BuyConnection_id | BuyConnectionCreatedAt | BuyConnectionUpdatedAt | BuyConnectionCreator | BuyConnectionUnit | BuyConnectionQuantity | BuyConnectionPrice | BuyConnectionCreatorObject | BuyConnectionType | BuyConnectionBids | BuyConnectionAcceptedBids | Group | createGroupPayload | updateGroupPayload | deleteGroupPayload | GroupConnection | GroupAggregator | GroupGroupBy | GroupConnection_id | GroupConnectionCreatedAt | GroupConnectionUpdatedAt | GroupConnectionGroupName | GroupConnectionCreator | GroupConnectionMembers | Sell | createSellPayload | updateSellPayload | deleteSellPayload | SellConnection | SellAggregator | SellAggregatorSum | SellAggregatorAvg | SellAggregatorMin | SellAggregatorMax | SellGroupBy | SellConnection_id | SellConnectionCreatedAt | SellConnectionUpdatedAt | SellConnectionCreator | SellConnectionUnit | SellConnectionQuantity | SellConnectionPrice | SellConnectionCreatorObject | SellConnectionType | SellConnectionBids | SellConnectionAcceptedBids | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionSocketId

type Mutation {
  createBid(input: createBidInput): createBidPayload
  updateBid(input: updateBidInput): updateBidPayload
  deleteBid(input: deleteBidInput): deleteBidPayload
  createBuy(input: createBuyInput): createBuyPayload
  updateBuy(input: updateBuyInput): updateBuyPayload
  deleteBuy(input: deleteBuyInput): deleteBuyPayload
  createGroup(input: createGroupInput): createGroupPayload
  updateGroup(input: updateGroupInput): updateGroupPayload
  deleteGroup(input: deleteGroupInput): deleteGroupPayload
  createSell(input: createSellInput): createSellPayload
  updateSell(input: updateSellInput): updateSellPayload
  deleteSell(input: deleteSellInput): deleteSellPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  bid(id: ID!): Bid
  bids(sort: String, limit: Int, start: Int, where: JSON): [Bid]
  bidsConnection(sort: String, limit: Int, start: Int, where: JSON): BidConnection
  buy(id: ID!): Buy
  buys(sort: String, limit: Int, start: Int, where: JSON): [Buy]
  buysConnection(sort: String, limit: Int, start: Int, where: JSON): BuyConnection
  group(id: ID!): Group
  groups(sort: String, limit: Int, start: Int, where: JSON): [Group]
  groupsConnection(sort: String, limit: Int, start: Int, where: JSON): GroupConnection
  sell(id: ID!): Sell
  sells(sort: String, limit: Int, start: Int, where: JSON): [Sell]
  sellsConnection(sort: String, limit: Int, start: Int, where: JSON): SellConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

"""Sell requests"""
type Sell {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  creator: String
  unit: String
  quantity: Float
  price: Float
  creatorObject: JSON
  type: String
  bids: JSON
  acceptedBids: JSON
}

type SellAggregator {
  count: Int
  sum: SellAggregatorSum
  avg: SellAggregatorAvg
  min: SellAggregatorMin
  max: SellAggregatorMax
}

type SellAggregatorAvg {
  quantity: Float
  price: Float
}

type SellAggregatorMax {
  quantity: Float
  price: Float
}

type SellAggregatorMin {
  quantity: Float
  price: Float
}

type SellAggregatorSum {
  quantity: Float
  price: Float
}

type SellConnection {
  values: [Sell]
  groupBy: SellGroupBy
  aggregate: SellAggregator
}

type SellConnection_id {
  key: ID
  connection: SellConnection
}

type SellConnectionAcceptedBids {
  key: JSON
  connection: SellConnection
}

type SellConnectionBids {
  key: JSON
  connection: SellConnection
}

type SellConnectionCreatedAt {
  key: DateTime
  connection: SellConnection
}

type SellConnectionCreator {
  key: String
  connection: SellConnection
}

type SellConnectionCreatorObject {
  key: JSON
  connection: SellConnection
}

type SellConnectionPrice {
  key: Float
  connection: SellConnection
}

type SellConnectionQuantity {
  key: Float
  connection: SellConnection
}

type SellConnectionType {
  key: String
  connection: SellConnection
}

type SellConnectionUnit {
  key: String
  connection: SellConnection
}

type SellConnectionUpdatedAt {
  key: DateTime
  connection: SellConnection
}

type SellGroupBy {
  _id: [SellConnection_id]
  createdAt: [SellConnectionCreatedAt]
  updatedAt: [SellConnectionUpdatedAt]
  creator: [SellConnectionCreator]
  unit: [SellConnectionUnit]
  quantity: [SellConnectionQuantity]
  price: [SellConnectionPrice]
  creatorObject: [SellConnectionCreatorObject]
  type: [SellConnectionType]
  bids: [SellConnectionBids]
  acceptedBids: [SellConnectionAcceptedBids]
}

input SellInput {
  creator: String
  unit: String
  quantity: Float
  price: Float
  creatorObject: JSON
  type: String
  bids: JSON
  acceptedBids: JSON
}

input updateBidInput {
  where: InputID
  data: editBidInput
}

type updateBidPayload {
  bid: Bid
}

input updateBuyInput {
  where: InputID
  data: editBuyInput
}

type updateBuyPayload {
  buy: Buy
}

input updateGroupInput {
  where: InputID
  data: editGroupInput
}

type updateGroupPayload {
  group: Group
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSellInput {
  where: InputID
  data: editSellInput
}

type updateSellPayload {
  sell: Sell
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  socketId: String
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  socketId: String
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionSocketId {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  socketId: [UsersPermissionsUserConnectionSocketId]
}
